" TODO do not duplicate the insert_header
"
function! s:insert_header_h()
"   let gatename = expand("%:t")
"   let pathname = expand("%:p:h")
"   let start_date = strftime("%a %b %d %H:%M:%S %Y")
"   let login = $USER
"   let real_name = system('cat /etc/passwd | grep $USER | cut -d: -f6 | cut -d/ -f3 | tr -d "\n"')
"   let last_date = start_date
"   execute ":set paste"
"   execute "normal! i/*"
"   execute "normal! o** " .gatename. " for  in /home/simon_p"
"   execute "normal! o** "
"   execute "normal! o** Made by ".real_name
"   execute "normal! o** Login   <".login."@epitech.net>"
"   execute "normal! o** "
"   execute "normal! o** Started on  ".start_date." ". real_name
"   execute "normal! o** Last update ".last_date." ". real_name
"   execute "normal! o*/"
"   execute "normal! o"
"   execute "normal! o"
"   execute ":set nopaste"
endfunction
autocmd BufNewFile *.{h,hpp,hh} call <SID>insert_header_h()

function! s:insert_header_c()
"   let gatename = expand("%:t")
"   let pathname = expand("%:p:h")
"   let real_name = system('cat /etc/passwd | grep $USER | cut -d: -f6 | cut -d/ -f3 | tr -d "\n"')
"   let start_date = strftime("%a %b %d %H:%M:%S %Y")
"   let last_date = start_date
"   let login = $USER
"   execute ":set paste"
"   execute "normal! i/*"
"   execute "normal! o** " .gatename. " for  in /home/simon_p"
"   execute "normal! o** "
"   execute "normal! o** Made by ".real_name
"   execute "normal! o** Login   <".login."@epitech.net>"
"   execute "normal! o** "
"   execute "normal! o** Started on  ".start_date." ". real_name
"   execute "normal! o** Last update ".last_date." ". real_name
"   execute "normal! o*/"
"   execute "normal! o"
"   execute "normal! o"
"   execute ":set nopaste"
endfunction
autocmd BufNewFile *.{c} call <SID>insert_header_c()

function! s:insert_header_cpp()
"   let gatename = expand("%:t")
"   let pathname = expand("%:p:h")
"   let real_name = system('cat /etc/passwd | grep $USER | cut -d: -f6 | cut -d/ -f3 | tr -d "\n"')
"   let start_date = strftime("%a %b %d %H:%M:%S %Y")
"   let last_date = start_date
"   let login = $USER
"   execute ":set paste"
"   execute "normal! i//"
"   execute "normal! o// " .gatename. " for  in " .pathname
"   execute "normal! o// "
"   execute "normal! o// Made by ".real_name
"   execute "normal! o// Login   <".login."@epitech.net>"
"   execute "normal! o// "
"   execute "normal! o// Started on  ".start_date." ". real_name
"   execute "normal! o//"
"   execute "normal! o"
"   execute "normal! o"
"   execute ":set nopaste"
endfunction
autocmd BufNewFile *.{cpp} call <SID>insert_header_cpp()

function! s:insert_header_makefile()
"   let gatename = expand("%:t")
"   let pathname = expand("%:p:h")
"   let real_name = system('cat /etc/passwd | grep $USER | cut -d: -f6 | cut -d/ -f3 | tr -d "\n"')
"   let start_date = strftime("%a %b %d %H:%M:%S %Y")
"   let last_date = start_date
"   let login = $USER
"   execute ":set paste"
"   execute "normal! i##"
"   execute "normal! o## " .gatename. " for  in " .pathname
"   execute "normal! o## "
"   execute "normal! o## Made by ".real_name
"   execute "normal! o## Login   <".login."@epitech.net>"
"   execute "normal! o## "
"   execute "normal! o## Started on  ".start_date." ". real_name
"   execute "normal! o##"
"   execute ":set nopaste"
endfunction

function! s:insert_auto_makefile()
    call inputsave()
    let language = confirm('Makefile', "&C\nC&++\n&Empty", 1)
    call inputrestore()
    if language == 1
	let compiler = "CC"
	let default_compiler = "gcc"
	let compiler_flags = "CFLAGS"
	let default_compiler_flags = "-W -Wall -std=c99 -Wextra"
	let source_extension = ".c"
    elseif language == 2
	let compiler = "CXX"
	let default_compiler = "g++"
	let compiler_flags = "CXXFLAGS"
	let default_compiler_flags = "-W -Wall -Wextra"
	let source_extension = ".cpp"
    else
	return
    endif

    let exe_name = "a.out"
    execute "set paste" 
    execute "normal! o"
    execute "normal! o".compiler."       ?= ".default_compiler
    execute "normal! o".compiler_flags."   += ".default_compiler_flags

    execute "normal! oNAME      = ".exe_name
    execute "normal! oSRC       = "
    execute "normal! o"
    execute "normal! oall: depend $(NAME)"
    execute "normal! o"
    execute "normal! odepend: .depend"
    execute "normal! o"
    execute "normal! o.depend: $(SRC)"
    execute "normal! o	@$(RM) .depend"
    execute "normal! o	$(".compiler.") $(".compiler_flags.") -MM $^ > .depend"
    execute "normal! o"
    execute "normal! oinclude .depend"
    execute "normal! o"
    execute "normal! oOBJ     = $(SRC:".source_extension."=.o)"
    execute "normal! o"
    execute "normal! o$(NAME): $(OBJ)"
    execute "normal! o	$(".compiler.") -o $@ $^ $(LDFLAGS)"
    execute "normal! o"
    execute "normal! oclean:"
    execute "normal! o	$(RM) $(OBJ)"
    execute "normal! o"
    execute "normal! ofclean: clean"
    execute "normal! o	$(RM) $(NAME)"
    execute "normal! o"
    execute "normal! ore: fclean all"
    execute "normal! o"
    execute "normal! o.PHONY: all depend clean fclean all re"
    execute ":set nopaste"
endfunction
autocmd BufNewFile {Makefile,makefile} call <SID>insert_header_makefile()
autocmd BufNewFile {Makefile,makefile} call <SID>insert_auto_makefile()

"function! s:over_length()
"  highlight OverLength ctermbg=red ctermfg=white
"  match OverLength /\%81v.*/
"endfunction
"
"autocmd BufNewFile *.{c,cpp,h,hpp} call <SID>over_length()
"autocmd BufRead *.{c,cpp,h,hpp} call <SID>over_length()

function! Insert_header()
    let file_name = buffer_name("%")
    if file_name =~ '\.c$'
	call <SID>insert_header_c()
    elseif file_name =~ '\.h$'
	call <SID>insert_header_h()
    elseif file_name =~ '^Makefile$' || file_name =~ '^makefile$'
	call <SID>insert_header_makefile()
    endif
endfunction

noremap <silent> <C-P> :call Insert_header()<CR>
